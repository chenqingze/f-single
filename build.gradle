buildscript {
    ext {
        springBootVersion = '2.7.5'
        springDependencyManagementVersion = '1.0.15.RELEASE'
        hibernateEnversVersion = '5.6.12.Final'
        querydslVersion = '5.0.0'
        spotlessVersion = '6.11.0'
        mapstructVersion = '1.5.3.Final'
        nanocaptchaVersion = '1.3'
    }
}
plugins {
    id 'java'
    id 'idea'
    id 'checkstyle'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id "com.diffplug.spotless" version "${spotlessVersion}"
}

group = 'com.famphony'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
    // spring
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.springframework.boot:spring-boot-starter-log4j2"
    modules {
        module("org.springframework.boot:spring-boot-starter-logging") {
            replacedBy("org.springframework.boot:spring-boot-starter-log4j2", "Use Log4j2 instead of Logback")
        }
    }
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // hibernate envers
    implementation "org.hibernate:hibernate-envers"
    // querydsl
    implementation "com.querydsl:querydsl-jpa"
    implementation "com.querydsl:querydsl-collections"
    annotationProcessor "com.querydsl:querydsl-apt::jpa"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    // This prevents java.lang.NoClassDefFoundError
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    // This prevents java.lang.NoClassDefFoundError
    // mapstruct
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    // nanocaptcha todo:后面如果没有需求就干掉他，用手机或email二次验证即可
    implementation "net.logicsquad:nanocaptcha:${nanocaptchaVersion}"

    runtimeOnly 'org.postgresql:postgresql'
}


/*构建参数配置start*/
/////////////////
//  mapstruct  //
/////////////////
tasks.withType(JavaCompile) {
    // config Querydsl generation
    // if you wanna replace Qclass with a specific directory,config here

    // config mappstruct generation
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true',
            '-Amapstruct.suppressGeneratorVersionInfoComment=true',
            '-Amapstruct.verbose=true',
            '-Amapstruct.unmappedTargetPolicy=WARN',
            '-Amapstruct.unmappedSourcePolicy=WARN',
            '-Amapstruct.defaultComponentModel=default'
    ]
}

////////////
//  Test  //
////////////
tasks.named('test') {
    useJUnitPlatform()
}

///////////////////////
// config sourceSets //
///////////////////////
sourceSets {
    // if you special a directory for generate class then Add QClass and mapstruct file path to the java source set
    //main.java.srcDirs += [ 'somePath' ]
}

///////////
// clean //
///////////
clean {
    // Remove QClass directory when doing `gradle clean`
    //delete file(generated Path)
}

////////////
// Format //
////////////
spotless {
    // enforceCheck !disableSpotlessCheck
    // ratchetFrom 'origin/main' // only format files which have changed since origin/main
    java {
        target fileTree('.') {
            include '**/src/*/java/**/*.java'
            exclude '**/build/**'
            exclude '**/.gradle/**'
        }
        toggleOffOn('@formatter:off', '@formatter:on')
		removeUnusedImports()
		googleJavaFormat()
		// importOrderFile("$rootDir/config/spotless/java.importorder")
		trimTrailingWhitespace()
		indentWithTabs(2) // or spaces. Takes an integer argument if you don't like 4
		indentWithSpaces(4)
		endWithNewline()
		custom 'Lambda fix', { it.replace('} )', '})').replace('} ,', '},') }
		licenseHeaderFile "$rootDir/config/spotless/license"
	}

//	typescript {
//		target 'frontend/web-angular/src/**/*.ts' // you have to set the target manually
//		// tsfmt()    // has its own section below
//		prettier().config(['tabWidth': 4]) // has its own section below
//
//	}
}

//////////////
//Checkstyle//
/////////////
checkstyle {
	toolVersion = '10.3.3'
	// checkstyle配置文件默认路径 ${project.rootDir}/config/checkstyle/checkstyle.xml也可指定其他路径
	// configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
}



/*构建参数配置end*/